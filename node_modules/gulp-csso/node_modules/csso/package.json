{
  "name": "csso",
  "description": "CSSO — CSS optimizer",
  "version": "1.5.4",
  "homepage": "https://github.com/css/csso",
  "author": {
    "name": "Sergey Kryzhanovsky",
    "email": "skryzhanovsky@ya.ru",
    "url": "https://github.com/afelix"
  },
  "maintainers": [
    {
      "name": "Roman Dvornov",
      "email": "rdvornov@gmail.com"
    }
  ],
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/css/csso"
  },
  "bugs": {
    "url": "https://github.com/css/csso/issues"
  },
  "bin": {
    "csso": "./bin/csso"
  },
  "main": "./lib/index",
  "scripts": {
    "test": "jscs . && mocha --reporter dot",
    "browserify": "browserify --standalone csso lib/index.js | uglifyjs --compress --mangle -o dist/csso-browser.js",
    "gh-pages": "git clone -b gh-pages https://github.com/css/csso.git .gh-pages && npm run browserify && cp dist/csso-browser.js .gh-pages/ && cd .gh-pages && git commit -am \"update\" && git push && cd .. && rm -rf .gh-pages",
    "prepublish": "npm run browserify"
  },
  "dependencies": {
    "clap": "^1.0.9"
  },
  "devDependencies": {
    "browserify": "^13.0.0",
    "jscs": "~2.9.0",
    "mocha": "~2.4.2",
    "uglify-js": "^2.6.1"
  },
  "engines": {
    "node": ">=0.12.0"
  },
  "files": [
    "bin",
    "dist/csso-browser.js",
    "lib",
    "HISTORY.md",
    "LICENSE",
    "README.md"
  ],
  "readme": "[![NPM version](https://img.shields.io/npm/v/csso.svg)](https://www.npmjs.com/package/csso)\n[![Build Status](https://travis-ci.org/css/csso.svg?branch=master)](https://travis-ci.org/css/csso)\n[![Dependency Status](https://img.shields.io/david/css/csso.svg)](https://david-dm.org/css/csso)\n[![devDependency Status](https://img.shields.io/david/dev/css/csso.svg?style=flat)](https://david-dm.org/css/csso#info=devDependencies)\n\nCSSO (CSS Optimizer) is a CSS minimizer unlike others. In addition to usual minification techniques it can perform structural optimization of CSS files, resulting in smaller file size compared to other minifiers.\n\n## Install\n\n```\nnpm install -g csso\n```\n\n## Usage\n\n### Command line\n\n```\ncsso [input] [output] [options]\n\nOptions:\n\n      --debug [level]      Output intermediate state of CSS during compression\n  -h, --help               Output usage information\n  -i, --input <filename>   Input file\n  -o, --output <filename>  Output file (result outputs to stdout if not set)\n      --restructure-off    Turns structure minimization off\n      --stat               Output statistics in stderr\n  -v, --version            Output version\n```\n\nSome examples:\n\n```\n> csso in.css out.css\n\n> csso in.css\n...output result in stdout...\n\n> echo \".test { color: #ff0000; }\" | csso\n.test{color:red}\n\n> cat source1.css source2.css | csso | gzip -9 -c > production.css.gz\n```\n\nDebug and statistics:\n\n```\n> echo '.test { color: #ff0000 }' | node bin/csso --stat >/dev/null\nFile:       <stdin>\nOriginal:   25 bytes\nCompressed: 16 bytes (64.00%)\nSaving:     9 bytes (36.00%)\nTime:       12 ms\nMemory:     0.346 MB\n```\n\n```\n> echo '.test { color: green; color: #ff0000 } .foo { color: red }' | node bin/csso --debug\n## parsing done in 10 ms\n\nCompress block #1\n(0.002ms) convertToInternal\n(0.000ms) clean\n(0.001ms) compress\n(0.002ms) prepare\n(0.000ms) initialRejoinRuleset\n(0.000ms) rejoinAtrule\n(0.000ms) disjoin\n(0.000ms) buildMaps\n(0.000ms) markShorthands\n(0.000ms) processShorthand\n(0.001ms) restructBlock\n(0.000ms) rejoinRuleset\n(0.000ms) restructRuleset\n## compressing done in 9 ms\n\n.foo,.test{color:red}\n```\n\n```\n> echo '.test { color: green; color: #ff0000 } .foo { color: red }' | node bin/csso --debug 2\n## parsing done in 8 ms\n\nCompress block #1\n(0.002ms) convertToInternal\n  .test{color:green;color:#ff0000}.foo{color:red}\n\n(0.000ms) clean\n  .test{color:green;color:#ff0000}.foo{color:red}\n\n(0.001ms) compress\n  .test{color:green;color:red}.foo{color:red}\n\n...\n\n(0.002ms) restructBlock\n  .test{color:red}.foo{color:red}\n\n(0.001ms) rejoinRuleset\n  .foo,.test{color:red}\n\n(0.000ms) restructRuleset\n  .foo,.test{color:red}\n\n## compressing done in 13 ms\n\n.foo,.test{color:red}\n```\n\n### API\n\n```js\nvar csso = require('csso');\n\nvar compressed = csso.minify('.test { color: #ff0000; }');\nconsole.log(compressed);\n// .test{color:red}\n\n// there are some options you can pass\nvar compressedWithOptions = csso.minify('.test { color: #ff0000; }', {\n    restructuring: false, // don't change css structure, i.e. don't merge declarations, rulesets etc\n    debug: true           // show additional debug information:\n                          // true or number from 1 to 3 (greater number - more details)\n});\n\n// you may do it step by step\nvar ast = csso.parse('.test { color: #ff0000; }');\nast = csso.compress(ast);\nvar compressed = csso.translate(ast, true);\nconsole.log(compressed);\n// .test{color:red}\n```\n\n## Documentation\n\n> May be outdated\n\n- [English](https://github.com/css/csso/blob/master/docs/index/index.en.md)\n- [Русский](https://github.com/css/csso/blob/master/docs/index/index.ru.md)\n- [日本語](https://github.com/css/csso/blob/master/docs/index/index.ja.md)\n- [한국어](https://github.com/css/csso/blob/master/docs/index/index.ko.md)\n",
  "readmeFilename": "README.md",
  "_id": "csso@1.5.4",
  "_from": "csso@^1.4.0"
}
